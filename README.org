This is a *WORK-IN-PROGRESS* and may not work for you. I have tried to make this as minimal as possible while still providing a reasonably-well working configuration out-of-the-box for R, latex, markdown, and git (all with reference management). If anything does not work or you feel something is missing, please let me know via the github issues. 
* Introduction

  This is intended to be a minimal emacs starter kit for people doing academic writing with a combination of R, LaTeX, and/or markdown. I wrote this because I got tired of saying something along the lines of: "No, I don't use Rstudio. I use emacs, but it's kind of a pain to get set up..."

  No more. Now that I've written this I can shamelessly recommend it to people.

  So this should get people the absolute bare minimum needed to get started using R/latex/markdown/rmarkdown/sweave/knitr in emacs.

  As far as I know, this works on all versions of emacs greater than 24.5.1 across Linux, Mac, and Windows operating systems. If you run into a problem, feel free to email me or create an issue in [[https://github.com/jabranham/emacs-for-social-science][this]] github repo.
* Installation 
** Step 1: Install Emacs 
   Installation instructions for Emacs are OS specific:
*** Linux/BSD
    Use your package manager
*** MacOS/OS X
    https://emacsformacosx.com/
*** Windows 
    These instructions are a condensed version of the official README. If you run into problems, consult the README:
    1. Go to [[http://ftp.gnu.org/gnu/emacs/windows/][this website]]
    2. Download the latest version of Emacs (24.5 as of this writing)
    3. Unzip that file into a directory where you want to install Emacs (=C:\Program Files=, for example)
    4. Run the =runemacs.exe= file inside the newly-created =bin= folder
       1. Optionally, you can add Emacs to the start menu by running the =addpm.exe= file
** Step 2: Clone this repo 
   Now that you've installed Emacs, you'll want to use these customizations so it works with R/markdown/latex/git etc. The easiest way is to do that with git, if you know how to use it.

   *Note for Windows users:* You'll have to figure out where Emacs thinks your "home" is. One way to do this is to open Emacs, and do =C-x d= (hold control, press x, release, then press d). It'll ask you what directory you want, tell it =~= and note wherever it opens. For me (Windows 10), this was =C:\Users\<myusername>\AppData\Roaming\= but it may be different for you. You can also set up an environmental variable =HOME= as described in [[https://www.emacswiki.org/emacs/MsWindowsDotEmacs][the wiki]].
   
*** If you know =git=: 
    #+BEGIN_SRC sh
      git clone https://github.com/jabranham/emacs-for-social-science.git ~/.emacs.d/
    #+END_SRC
   
    Windows users will need to replace =~= with wherever Emacs is calling home, as described above.
    
*** If you don't know git:
    Download a [[https://github.com/jabranham/emacs-for-social-science/archive/master.zip][zipped version]] and extract it into =~/.emacs.d/=. 

    Windows users will need to replace =~= with wherever Emacs is calling home, as described above.
    
** Step 3: Start Emacs
   When you start Emacs, it should start downloading and compiling some files (packages). Just sit back for this part - it'll take a minute. You may need to answer "y" when prompted about saving abbreviations. It will output warnings and some messages - you may ignore these. If the process stops, quit Emacs and restart it.

   If you restart Emacs and are presented with an ugly screen with some links to a tutorial, walkthrough, and others, and NO errors, then everything has set up successfully! You're ready to go.

*** Immediate customization
   You'll need to set up a few things like telling Emacs where your big =.bib= file is. All of these are in the =init-emacs.org= file near the top under the section "Your customizations". So, for example, to let Emacs know about your big bib file, you would change the value of the =my/bib-file-location= to wherever your bib file is located on your computer.
   
* Usage

  Many of Emacs' keybindings look something like =C-c= or =M-c=. The first says control-c, the second meta-c. The meta key is usually alt. =M-x= provides a searchable list of commands you can run, so if you can't remember the exact name, you can look it up using =M-x=. There is a general-purpose tutorial you can access with =C-h t=. It will teach you most of the basic commands necessary to move around inside Emacs. I highly recommend skimming through it. Some of the commands will be a little difference because this starter kit includes helm (which replaces much of Emacs' builtin file/command-finding interface). 

  You should be set up and ready to use Emacs for R, (r)markdown, latex, and git. Emacs will also support a lot of other programming languages out-of-the-box.

  To open a file, do =C-x f=, which opens a buffer showing the files and folders of your current directory.You can open a file by selecting it (navigate up/down using the arrow keys or =C-p= / =C-n=). To go up a directory, hit =C-l=. To go down into a folder, have it selected and hit =C-j=. You can learn more basic Emacs functionality by going through the tutorial with =C-h t=.

  =C-c C-r= will let you browse your bibliography from any window. You may also insert citations in latex and markdown using =C-c C-r=. 

  Emacs thinks about "buffers" in terms of a major mode. So when you're editing an markdown file, emacs is in markdown-mode. You can learn about the current major mode, including useful keybindings, by pressing =C-h m= (=C-h= is help, then =m= for mode). So if you do that when you're editing an R script, you'll learn that =C-RET= (control-enter) is bound to =ess-eval-region-or-line-and-step=, which (as the function name suggests), will evaluate a region if selected. If not, it will evaluate the line that point (your cursor) is on, and then it will "step" (i.e. move to the next bit of code). 

  If you want to learn about a function, you can press =C-h f=, and if you want to learn about a variable =C-h v=. 

* Further customization 

  In [[file:init-emacs.org]] I've pointed out a few options you may wish to customize, such as =bibtex-complation-library-path= (for keeping track of pdfs associated with articles in your bib file) and =bibtex-completion-notes-path= (for keeping track of notes associated with entries in your bib file). Customization is usually as easy as setting the value of a variable. For example, set up where you keep pdfs, you could put the following under the =:config= of =use-package helm-bibtex=:

  #+BEGIN_EXAMPLE
    (setq bibtex-completion-library-path "~/Dropbox/reference-pdfs")
  #+END_EXAMPLE

  
