#+TITLE: Emacs configuration
* Your customizations
  You will need to tell Emacs a little about your particular setup:

  First, let Emacs know where it is you keep your =.bib= file:


  #+BEGIN_SRC emacs-lisp
    (defvar my/bib-file-location "~/.emacs.d/research.bib"
      "Where I keep my bib file.")
  #+END_SRC
* Emacs package management
  This section sets up emacs' package management system. MELPA and ELPA are the two biggest repos for packages. Windows is a pain because it doesn't work well with =https= so we have to fallback to =http=. The second thing we do here is to make sure that [[https://github.com/jwiegley/use-package][use-package]] is installed:

  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)

    ;; Windows has issues using https:// instead of http:// so we want to
    ;; set the package locations to use the secure connection when they
    ;; can:
    (cond
     ((string-equal system-type "windows-nt") ; Microsoft Windows
      (progn
        (setq package-archives
              '(("melpa" . "http://melpa.org/packages/")
                ("elpa" . "http://elpa.gnu.org/packages/")))))
     ((or (string-equal system-type "gnu/linux") (string-equal system-type "darwin")) ; Linux & Mac OS X
      (progn
        (setq package-archives
              '(("melpa" . "https://melpa.org/packages/")
                ("elpa" . "https://elpa.gnu.org/packages/"))))))

    (package-initialize)

    ;; We'll use the use-package package to mange our config. Make sure
    ;; it's installed:
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    ;; Make use-package available for use:
    (eval-when-compile
      (require 'use-package))
    (require 'bind-key)

  #+END_SRC
* Dealing with default emacs
  Emacs was created probably before you were born, which makes it super ancient in computer terms. In this section, we override some of the (now) silly default behavior so that emacs acts more like we expect a program to act in the 21st century. We'll load up some better default settings, activate auto-completion, and enable a smart way of dealing with pairs (e.g. parentheses, quotes, etc)

  In particular, we load =better-defaults=, a package that selects some better default settings for Emacs. it you're interested what it does, you can look at it [[https://github.com/technomancy/better-defaults][on github]]:

  #+BEGIN_SRC emacs-lisp
    (setq use-package-verbose t) ;; see which package is loaded slowly
    (delete-selection-mode) ; if I select something then type, delete it and replace it
    (use-package better-defaults
      :ensure t)
    (menu-bar-mode) ; better-defaults disables this but it's useful when you're getting used to Emacs
    (setq scroll-conservatively 1000) ; when point moves offscreen, don't jump to recenter it
    (setq visible-bell nil) ; fix for bug in Mac, see http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/
    (setq ring-bell-function 'ignore)
  #+END_SRC

  In my world, =C-z= is undo, not minimize emacs:

  #+BEGIN_SRC emacs-lisp
    ;; comment this part since I use Evil
    ;; (global-set-key (kbd "C-z") #'undo)
  #+END_SRC

  We also want words to wrap around nicely. The default behavior wraps in the middle of a word, which is awful:

  #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode)
  #+END_SRC

  And we want to see line numbers in the left:

  #+BEGIN_SRC emacs-lisp
    (global-linum-mode t)
    (setq linum-format "%4d \u2502 ")
  #+END_SRC

    
  #+BEGIN_SRC emacs-lisp
    ;; deletes all the whitespace when you hit backspace or delete
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))
  #+END_SRC

** Font

   The default font size(10pt) is too small for me personally, so I want to rescale it a little bit. Also, set Chinese fonts to solve coding problem.

  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :height 140)
    
    ;; [[http://zhuoqiang.me/torture-emacs.html][Font setting comes here.]]
    ;; Setting English Font
    (set-face-attribute 'default nil :font "Consolas 14")
    
    ;; Chinese Font
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset (font-spec :family "Microsoft YaHei"
                                           :size 14)))   
    ;; font scaling
    (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("i" text-scale-increase "in")
       ("d" text-scale-decrease "out")
       ("0" (text-scale-adjust 0) "reset")
       ("q" nil "quit" :color blue))
  #+END_SRC

** Fix for Mac
   Emacs on Mac sometimes can't find installed programs (e.g. R, spellcheck). This fixes that:

   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
       (use-package exec-path-from-shell
         :ensure t
         :config
         (exec-path-from-shell-initialize)))
   #+END_SRC
** Auto completion 
   We'll use =company= (short for "complete anything") to do auto-completion. This will, for example, enable the same kind of pop-up messages that mimic [[https://support.rstudio.com/hc/en-us/articles/205273297-Code-Completion][Rstudio's autocomplete features]]. As of this writing (August 2016), Emacs' autocompletion isn't quite as good as Rstudios. In particular, it won't pick up on variables from =data.frames= that you've passed to e.g. =dplyr= functions through piping calls. (e.g. ~mtcars %>% filter()~) won't give you =mpg= as an option inside the filter statement. Having said that, =company= does a really good job:

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (add-hook 'after-init-hook #'global-company-mode)
       :config
       (setq company-tooltip-limit 20)                      ; bigger popup window
       (setq company-idle-delay .2)                         ; decrease delay before autocompletion popup shows
       (setq company-echo-delay 0)                          ; remove annoying blinking
       (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
       (setq company-dabbrev-downcase nil)                  ; set dabbrev not to downcase things
       ;;(delete 'company-dabbrev company-backends)           ; weird candidates
       (define-key company-active-map (kbd "<tab>")
         (lambda () (interactive) (company-complete-common-or-cycle 1)))
       (use-package company-quickhelp
         :ensure t
         :config
         (company-quickhelp-mode 1))
         (setq company-quickhelp-delay nil))  ;;set to nil to avoid automatically pop up help html
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
   (use-package company-auctex
     ;;:disabled ;; cause company to respond very slow
     :ensure t
     :defer t
     :init (add-hook 'LaTeX-mode-hook #'company-auctex-init))

   (add-to-list 'load-path "~/.emacs.d/bratex")
   (require 'bratex)
   (add-hook 'latex-mode-hook #'bratex-config)
   
   ;;(use-package company-math
   ;;  :disabled ;; cause company to respond very slow
   ;;  :ensure t
   ;;  :defer t
   ;;  :after company
   ;;  ;; Add backend for math characters
   ;;  :init (progn
   ;;          (add-to-list 'company-backends 'company-math-symbols-unicode)
   ;;          (add-to-list 'company-backends 'company-math-symbols-latex)))
   
   (use-package company-statistics
     :ensure t
     :after company
     :config (company-statistics-mode 1))
   #+END_SRC

** Smartparens
   This package will help you deal with matching pairs (e.g. (), "", etc) by automatically inserting the closing pair when you open it and allowing you to "wrap" expressions that are selected (in other words, if you've already written something and you realize you want it in quotes/parens, just highlight it and press the " or ( ):

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :init
       (require 'smartparens-config)
       (smartparens-global-mode)
       (show-smartparens-global-mode)

       ;; Stata additions for smartparens
       (sp-local-pair 'ado-mode "`" "'") ;; Defining locals
       (sp-local-pair 'ado-mode "`\"" "\"'") ;; Escapes in Stata
      )
   #+END_SRC

** Backup files
   I want emacs to make these, but don't want to clutter up my project folders with tons of backup files. Solution: put them in the ~.emacs.d/~ directory.
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                      (concat user-emacs-directory "backups")))))
   #+END_SRC
   
** Spell check 
   We can use =flyspell= for on-the-fly spell checking, similar to what we get with MS Word or whatever. =C-;= runs =flyspell-auto-correct-previous-word= which automatically corrects the last word still on screen. If it doesn't guess right the first time, press it again. 
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell
       :disabled ;; slow in windows
       :ensure t
       :init
       ;;While it always spells a flyspell enabling error message, 
       ;;which is a kind of anonying.
       (setq flyspell-issue-welcome-flag nil) ;; fix flyspell problem
       :config
       (when (eq system-type 'windows-nt) ;; comes from here: https://github.com/voltecrus/emacs.d-1/blob/master/init.el
         (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/"))
       (setq ispell-program-name "aspell" ; use aspell instead of ispell
        ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
       (add-hook 'text-mode-hook #'turn-on-flyspell)
       (setq flyspell-issue-message-flag nil) ;; fix performance problem in https://www.emacswiki.org/emacs/FlySpell
       (add-hook 'prog-mode-hook #'flyspell-prog-mode)
       (add-hook 'ess-mode-hook #'flyspell-prog-mode))
   #+END_SRC
   
** Themes and mode-line
   I have tried a lot of themes, but none is satisfying. Try this again.
   
   Smart Mode Line is a sexy mode-line for Emacs. It aims to be easy to read from small to large monitors by using colors, a prefix feature, and smart truncation.

   #+BEGIN_SRC emacs-lisp
     ;;(use-package apropospriate-theme
     ;;  :disabled
     ;;  :ensure t
     ;;  :config
     ;;  (load-theme 'apropospriate-light t))  

     ;; https://github.com/abo-abo/eclipse-theme.git
     (use-package eclipse-theme
       :disabled
       :ensure t
       :defer t
       :init (load-theme 'eclipse t))

     (use-package spacemacs-theme
       :disabled
       :ensure t
       :init (load-theme 'spacemacs-light t))

     (use-package adwaita-theme
       :disabled
       :ensure t
       :init (load-theme 'adwaita t))

     (use-package tango-plus-theme
       :disabled
       :ensure t
       :init (load-theme 'tango-plus t))

     (use-package color-theme-sanityinc-tomorrow
       :ensure t
       :config
       (progn
         (load-theme 'sanityinc-tomorrow-day t)))

     (use-package leuven-theme
       :disabled
       :ensure t
       :config
       (progn
         (load-theme 'leuven t)))

     ;;smart-line-mode
     (use-package smart-mode-line
       :disabled
       :ensure t
       :init
       (progn
         (setq sml/no-confirm-load-theme t)
         (sml/setup)))

     (use-package spaceline
       :ensure t
       :defer 5
       :init
       :config
       (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
       (require 'spaceline-config)
       (spaceline-spacemacs-theme))
   #+END_SRC

** Restart Emacs
  The heading says it all. 
  
   #+BEGIN_SRC emacs-lisp
   (use-package restart-emacs
     :ensure t
     :bind* (("C-x M-c" . restart-emacs)))
   #+END_SRC

** Highlight

  #+BEGIN_SRC emacs-lisp
    (use-package volatile-highlights
      :ensure t
      :defer t
      :diminish volatile-highlights-mode
      :config
      (volatile-highlights-mode t))
    
    (global-hl-line-mode t) ;; this turns on highlight line mode. It makes it easy to see the line the cursor's on.
    
    ;; flashes the cursor's line when you scroll
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      )
  #+END_SRC

** Undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
   #+END_SRC 

** Rectangle editing
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                           :color red 
                           :post (deactivate-mark))
       "
       ^_k_^        _d_elete        _s_tring      _e_xchange  
     _h_   _l_      _o_k            _y_ank        _p_aste 
       ^_j_^        _n_ew-copy      _r_eset       _u_ndo
     "
       ("h" backward-char nil)
       ("l" forward-char nil)
       ("k" previous-line nil)
       ("j" next-line nil)
       ("e" exchange-point-and-mark nil)
       ("n" copy-rectangle-as-kill nil)
       ("d" delete-rectangle nil)
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1)) nil)
       ("y" yank-rectangle nil)
       ("u" undo nil)
       ("s" string-rectangle nil)
       ("p" kill-rectangle nil)
       ("o" nil nil))
     (global-set-key (kbd "C-x SPC") 'hydra-rectangle/body) 
   #+END_SRC

** Centering-window
   Global minor mode that centers the text of the window. If another window is visible the text goes back to normal if its width is less than cwm-centered-window-width.
   #+BEGIN_SRC emacs-lisp
     ;;(use-package centered-window-mode
     ;; :ensure t
     ;; :config (centered-window-mode t))
   #+END_SRC 

* Hydra
  This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.

  #+BEGIN_SRC emacs-lisp
  ;; this configuration comes from [[https://github.com/joedicastro/dotfiles/blob/master/emacs/.emacs.d/readme.org][here]].
    (use-package hydra
      :ensure t
      :defer 0.1
      :init )
  #+END_SRC

* R (ESS)
  ESS (short for Emacs Speaks Statistics) is the package that lets Emacs know about R and how it works. Let's load it up. No need to make sure that it is installed like we did with =use-package= in the previous section - =use-package= lets us just say "ensure" and will install it if it doesn't exist:  

  #+BEGIN_SRC emacs-lisp
    (use-package ess-site
      :ensure ess)
  #+END_SRC

** Stata
   Stata is not so fully supported as R in ESS, especially on Windows. See [[https://www.statalist.org/forums/forum/general-stata-discussion/general/1309287-how-to-use-stata-in-emacs-with-ess][here]] for a discussion. But we still get an option to use ado-mode, which is not perfect to let you run Stata in terminal on Windows, but is still great to work in Emacs. [[http://louabill.org/Stata/ado-mode_install.html][Configuration comes here.]] Also, ado-mode may be override by ESS, so we need to start if after ESS loaded, see [[https://www.statalist.org/forums/forum/general-stata-discussion/general/22851-ado-mode-emacs-and-ess][here]] for discussion.

  #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "C:/Apps-SU/ado-mode-1.15.1.4/lisp")
     (require 'ado-mode)
  #+END_SRC
   
* Elpy
   Elpy is an Emacs package to bring powerful Python editing to Emacs. It combines and configures a number of other packages, both written in Emacs Lisp as well as Python.

   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable)
       (add-to-list 'exec-path "C:/conda/anaconda3/")
       ;;(setenv "PATH" (concat "C:\\conda\\anaconda3\\Scripts;C:\\conda\\anaconda3;" (getenv "PATH"))) 
       ;;(setq python-shell-interpreter "C:/conda/anaconda3/python.exe")
       (setq elpy-rpc-python-command "python")
       )
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
     (use-package py-autopep8 
       :ensure t
       :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
       )
   #+END_SRC
   
* Latex (AuCTeX)
  If you use latex to do any writing, you'll be happy to know that emacs is the highest-rated latex editor [[http://tex.stackexchange.com/questions/339/latex-editors-ides/][on stackexchange]].
  
  #+BEGIN_SRC emacs-lisp
    (use-package tex-site
      :ensure auctex
      :mode ("\\.tex\\'" . latex-mode)
      :config
      (setq TeX-parse-self t)
      (setq TeX-save-query nil)
      ;; Here we make auctex aware of latexmk and xelatexmk. We can use
      ;; these instead of calling pdflatex, bibtex, pdflatex, pdflatex (or
      ;; similar). I'll set latexmk as the default as there's really no
      ;; reason to use pdflatex
      (eval-after-load "tex"
        '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pvc -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk")))
      (eval-after-load "tex"
        '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -pvc -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk")))
      (add-hook 'LaTeX-mode-hook
            (lambda ()
              (company-mode)
              (smartparens-mode)
              (turn-on-reftex)
              (setq reftex-plug-into-AUCTeX t)
              (reftex-isearch-minor-mode)))
              ;;(setq TeX-command-default "latexmk")
              ;;(setq TeX-PDF-mode t)
              ;;(setq TeX-source-correlate-mode t)
              ;;(setq TeX-source-correlate-method 'synctex)))
              ;;(setq TeX-source-correlate-start-server t)))
       (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
       ;; use sumatra to view pdf
       ;; http://stackoverflow.com/questions/14448606/sync-emacs-auctex-with-sumatra-pdf
       (setq TeX-PDF-mode t)
       (setq TeX-source-correlate-mode t)
       (setq TeX-source-correlate-method 'synctex)
       (setq TeX-view-program-list
          '(("Sumatra PDF" ("\"C:/Program Files/SumatraPDF/SumatraPDF.exe\" -reuse-instance"
                             (mode-io-correlate " -forward-search %b %n ") " %o"))))
       (eval-after-load 'tex
         '(progn
            (assq-delete-all 'output-pdf TeX-view-program-selection)
            (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF")))))
  #+END_SRC
  
** Sumatra Pdf
   Sumatra pdf reader is a small but powerful pdf viewer, since I can't use pdf-tools on Windows right now, it's a good alternative, maybe.

* Pdf-tools
  PDF Tools is, among other things, a replacement of DocView for PDF files. The key difference is, that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.

This rendering is performed by a special library named, for whatever reason, poppler, running inside a server program. This program is called =epdfinfo= and its job is it to successively read requests from Emacs and produce the proper results, i.e. the PNG image of a PDF page.

  #+BEGIN_SRC emacs-lisp
    ;; This configure file comes from [[http://nasseralkmim.github.io/notes/2016/08/21/my-latex-environment/][here]]
    (use-package pdf-tools
      :disabled
      :ensure t
      :mode ("\\.pdf\\'" . pdf-tools-install)
      :defer t
      :config
      (setenv "PATH" (concat "C:\\APPS-SU\\msys64\\mingw64\\bin;" (getenv "PATH"))) 
      (setq mouse-wheel-follow-mouse t)
      (setq-default pdf-view-display-size 'fit-page))
   #+END_SRC

* Reftex
  Reftex is a package that helps inserting labels, references and citations.

  #+BEGIN_SRC emacs-lisp
    (use-package reftex
      :ensure t
      :defer t
      :config
      (setq reftex-cite-prompt-optional-args t)); Prompt for empty optional arguments in cite 
  #+END_SRC
* References & bibliographies
  This package configuration lets you type =C-c C-r=  to bring up a list of your references. You can then search through it til you find the one you want. Hitting =RET= inserts a citation. There are a few other things you can do besides inserting citations - have a look by highlighting a bib entry and pressing =M-o=. 

=ivy-bibtex= can also keep track of pdfs of articles and notes that you take pertaining to these articles. Since this is a "minimal" configuration, I don't set that up here. If you're interested, look at =bibtex-completion-library-path= and =bibtex-completion-notes-path=

  #+BEGIN_SRC emacs-lisp
    (use-package ivy-bibtex
      :ensure t
      :defer t
      :config 
      (setq bibtex-completion-bibliography my/bib-file-location)
      (bind-key* "C-c C-r" #'ivy-bibtex)
      ;; default is to open pdf - change that to insert citation
      (setq ivy-bibtex-default-action #'ivy-bibtex-insert-citation)
      )
  #+END_SRC

* Rmarkdown/knitr (polymode)
  Polymode is a package that lets us use emacs to edit rmarkdown and sweave-type files that combine markdown or latex with R code. Let's load it up and make it aware of the file extensions:

  #+BEGIN_SRC emacs-lisp
    (use-package polymode
      :ensure t
      :mode
      ("\\.Snw" . poly-noweb+r-mode)
      ("\\.Rnw" . poly-noweb+r-mode)
      ("\\.Rmd" . poly-markdown+r-mode))
  #+END_SRC

  Markdown mode is a major mode for editing Markdown-formatted text.

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC

* Git (magit)
  Magit is an Emacs package that makes dealing with git awesome.

  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :disabled ;; slow in windows
      :ensure t
      :bind ("C-x g" . magit-status))
  #+END_SRC

* Evil
  Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (evil-mode 1) ;;enable evil mode by default
      ;;(setq evil-default-state 'emacs) ;; enter emacs mode after initialize
      (evil-set-initial-state 'dired-mode 'emacs) ;; set to emacs mode when in dired mode
      (define-key evil-emacs-state-map (kbd "C-o") 'evil-execute-in-normal-state) ;;temporary enter evil mode
      :config
      ;; show which mode is in
      (setq evil-normal-state-tag "NORMAL")
      (setq evil-insert-state-tag "INSERT")
      (setq evil-visual-state-tag "VISUAL")
      )
  #+END_SRC

* Window move
** Window-numbering
  Numbered window shortcuts for Emacs. Other options maybe ace-window, but I prefer this one, which is a little bit consistent with the way of clover or other software switching tabs.

  #+BEGIN_SRC emacs-lisp
    (use-package window-numbering
      :ensure t
      :init
      (progn
        (window-numbering-mode t)))
  #+END_SRC
  
** Winner-mode

  #+BEGIN_SRC emacs-lisp
    (use-package winner
    :init
    (winner-mode)) 
  #+END_SRC

** Windmove

   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings) ;; use shift + left/right to move between windows 
   #+END_SRC
   
** Ace-window

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
         :ensure t
         :init
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
         (setq aw-dispatch-always t)
         (setq aw-background nil)
         :bind ("M-p" . ace-window)
         :config
         (custom-set-faces '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        )

  (global-set-key (kbd "<f9>")
   (defhydra hydra-window () 
      "
   Movement^^        ^Split^         ^Switch^		^Resize^
   ----------------------------------------------------------------
   _h_ ←       	_v_ertical    	_b_uffer		_q_ X←
   _j_ ↓        	_x_ horizontal	_f_ind files	_w_ X↓
   _k_ ↑        	_z_ undo      	_a_ce 1		_e_ X↑
   _l_ →        	_Z_ reset      	_s_wap		_r_ X→
   _F_ollow		_D_lt Other   	_S_ave		max_i_mize
   _SPC_ cancel	_o_nly this   	_d_elete	
   "
      ("h" windmove-left )
      ("j" windmove-down )
      ("k" windmove-up )
      ("l" windmove-right )
      ("q" hydra-move-splitter-left)
      ("w" hydra-move-splitter-down)
      ("e" hydra-move-splitter-up)
      ("r" hydra-move-splitter-right)
      ("b" helm-mini)
      ("f" helm-find-files)
      ("F" follow-mode)
      ("a" (lambda ()
             (interactive)
             (ace-window 1)
             (add-hook 'ace-window-end-once-hook
                       'hydra-window/body))
          )
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right))
          )
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down))
          )
      ("s" (lambda ()
             (interactive)
             (ace-window 4)
             (add-hook 'ace-window-end-once-hook
                       'hydra-window/body)))
      ("S" save-buffer)
      ("d" delete-window)
      ("D" (lambda ()
             (interactive)
             (ace-window 16)
             (add-hook 'ace-window-end-once-hook
                       'hydra-window/body))
          )
      ("o" delete-other-windows)
      ("i" ace-maximize-window)
      ("z" (progn
             (winner-undo)
             (setq this-command 'winner-undo))
      )
      ("Z" winner-redo)
      ("SPC" nil)
      ))

   #+END_SRC

* Dump-jump
   Dumb Jump is an Emacs "jump to definition" package with support for multiple programming languages that favors "just working".

  #+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config ((setq dumb-jump-selector 'ivy) 
             (setq dumb-jump-prefer-searcher 'rg))
    :ensure t
    :defer t)
  #+END_SRC

* Expand-region 
  Expand region increases the selected region by semantic units. Just keep pressing the key until it selects what you want.
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :disabled
      :ensure t
      :config 
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC

* Indent
  aggressive-indent-mode is a minor mode that keeps your code always indented. It reindents after every change, making it more reliable than electric-indent-mode.
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
        :disabled ;; weird typing Stata code
        :ensure t
        :config
        (global-aggressive-indent-mode))
    #+END_SRC

* Which-key
   Emacs package that displays available keybindings in popup.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :diminish ""
       :config
       (which-key-mode t))
   #+END_SRC
* Project
** Projectile 
  Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies(when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing mechanism backed by external commands exists as well).
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode)
      (setq projectile-enable-caching t)
      (setq projectile-indexing-method 'alien)
      (setq projectile-completion-system 'ivy))
    
    (use-package counsel-projectile
      :ensure t
      :defer t
      :config
      (counsel-projectile-on))
    
  #+END_SRC
  
** Search tools
   Ag and ripgrep are too command line search tools that are alternatives to grep but with are relatively more efficient.

  #+BEGIN_SRC emacs-lisp
    (use-package ag
      :ensure t
      :commands (ag ag-files ag-regexp ag-project ag-dired)
      :config 
      (setq ag-highlight-search t)
      (setq ag-reuse-buffers 't))
    
    (use-package ripgrep
      :ensure t)

    (use-package projectile-ripgrep
      :ensure t)
  #+END_SRC

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions and Ivy / Counsel replace a lot of ido or helms completion functionality.

  #+BEGIN_SRC emacs-lisp  
   (use-package counsel
     :ensure t
     :bind
     (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))


   (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :bind (("C-x b" . ivy-switch-buffer))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy))


   (use-package swiper
     :ensure t
     :bind (("C-s" . swiper)
            ("M-r" . counsel-rg) ;; http://oremacs.com/ recommend use rg as an main search tool
            ("C-c g" . counsel-git)
            ("C-c j" . counsel-git-grep)
            ("C-c C-r" . ivy-resume)
            ("M-x" . counsel-M-x)
           )
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
       ))
  #+END_SRC

* Avy
  avy is a GNU Emacs package for jumping to visible text using a char-based decision tree. 
  #+BEGIN_SRC emacs-lisp
    (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char-2))
  #+END_SRC

* Flycheck 
  Modern on-the-fly syntax checking extension for GNU Emacs.

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :disabled ;; slow in windows
      :ensure t
      :init (global-flycheck-mode))
  #+END_SRC

Then press C-M-x with point somewhere in this form to install and enable Flycheck for the current Emacs session.

* Smex 
  Smex is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to your recently and most frequently used commands. And to all the other commands, too.
  #+BEGIN_SRC emacs-lisp
   (use-package smex
     ;;:disabled ;; not needed since we get counsel-M-x, not disable it if we want recent commands list
     :ensure t
     ;;:bind (("M-x" . smex)
     ;;       ("M-X" . smex-major-mode-commands))
     :config
     (progn
      (smex-initialize))) 
  #+END_SRC

* YASnippet 
  YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet. 

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :commands (yas-minor-mode) ; autoload `yasnippet' when `yas-minor-mode' is called
                                             ; using any means: via a hook or by user
                                             ; Feel free to add more commands to this
                                             ; list to suit your needs.
       :config ; stuff to do before requiring the package
       (progn
         (add-hook 'prog-mode-hook #'yas-minor-mode))
       :config ; stuff to do after requiring the package
       (progn
         (yas-reload-all)))
   #+END_SRC

* Org-mode

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (defhydra hydra-org (:color red :columns 3) 
       "Org Mode Movements"
       ("n" outline-next-visible-heading "next heading")
       ("p" outline-previous-visible-heading "prev heading")
       ("N" org-forward-heading-same-level "next heading at same level")
       ("P" org-backward-heading-same-level "prev heading at same level")
       ("u" outline-up-heading "up heading")
       ("g" org-goto "goto" :exit t))
     (add-hook 'org-mode-hook
          (lambda () (local-set-key (kbd "<f8>") #'hydra-org/body)))
   #+END_SRC
* IBUFFER

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
  	(quote (("default"
  		 ("dired" (mode . dired-mode))
  		 ("org" (name . "^.*org$"))
  	       
  		 ("web" (or (mode . web-mode) (mode . js2-mode)))
  		 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
  		 ("mu4e" (or
  
                   (mode . mu4e-compose-mode)
                   (name . "\*mu4e\*")
                   ))
  		 ("programming" (or
  				 (mode . python-mode)
  				 (mode . c++-mode)))
  		 ("emacs" (or
  			   (name . "^\\*scratch\\*$")
  			   (name . "^\\*Messages\\*$")))
  		 ))))
    (add-hook 'ibuffer-mode-hook
  	    (lambda ()
  	      (ibuffer-auto-mode 1)
  	      (ibuffer-switch-to-saved-filter-groups "default")))
  
    ;; don't show these
  					  ;(add-to-list 'ibuffer-never-show-predicates "zowie")
    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)
  
    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)
  
  #+END_SRC
* Google
  Google-this is a set of emacs functions and bindings to google under point.
  #+BEGIN_SRC emacs-lisp
    ;; google-this
    (use-package google-this
      :disabled
      :ensure
      :config
      (google-this-mode 1)) 
  #+END_SRC
  
 Gscholar-bibtex allows you to retrieve BibTeX entries from Google Scholar, ACM Digital Library, IEEE Xplore and DBLP.
  #+BEGIN_SRC emacs-lisp
    (use-package gscholar-bibtex
      :ensure
      :commands gscholar-bibtex
      :init
      (setq gscholar-bibtex-database-file "~/.emacs.d/research.bib")
      :config
      (dolist (source '("ACM Digital Library" "IEEE Xplore" "DBLP"))
        (gscholar-bibtex-source-on-off :off source))
      (setq gscholar-bibtex-default-source "Google Scholar"))  
  #+END_SRC
